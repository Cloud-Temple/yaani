netbox:
  api:
    # API section to specify api configuration
    # All the following keys are directly provided to pynetbox for netbox api connection purposes.
    # (see https://pynetbox.readthedocs.io/en/latest/index.html for more information)

    # This key is mandatory
    url: "http://netbox.cloud-temple.lan/"

    # The followings are optional
    # token: "<Netbox token>"

    # Private key and private key file are mutually exclusive parameters
    # private_key: "<Your private key>"
    # private_key_file: "<Your private key file>"

    # ssl_verify: True

  import:
    # The 'import' section indicates which elements must be provided in the inventory, how to group them, and use filtering and variables loading features.
    # The 'import' section is optional and must be used only if some grouping, filtering or var loading feature is needed.
    # If present, this section must contain at least one section amongst the following : dcim, virtualization... (netbox applications)
    # 'dcim' for example is an application name from netbox where we can find devices, racks, etc.
    dcim:
      devices:
        # The 'device' section configures import from Netbox on device objects. This section is called an 'import statement' of type 'device'.
        # All import statements, in whatever application, are structured in the same way.

        # The 'filters' value is passed when requesting Netbox via pynetbox. It allows to narrow the fetch from netbox.
        # This field is optional.
        filters:
          role_id: 20

        # The 'group_prefix' is an optional field. If the group_by statement is used, this will prefix every group name created for the current import statement
        # with the given prefix. This is used to avoid colliding group names for different types of element.
        # Example: With the following, every device group will be prefixed with the 'dev_' particle.
        group_prefix: 'dev_'

        # The 'host_vars' field is optional. It configures which variable form Netbox to load as hostvars in the inventory.
        sub_import:
          # stack: interfaces
          stack: interfaces.ip_addresses
          vars:
            - interfaces:
                application: dcim
                type: interfaces
                index: name
                filter:
                  device_id: id
            - ip_addresses:
                application: ipam
                type: ip-addresses
                index: address
                filter:
                  interface_id: id

        host_vars:
          # hook root of sub imports variable 'interfaces'
          - interfaces: <s>interfaces

          # The key is the name of the variable in the inventory. The value is the name of the key where to find the information
          # in the output returned by Netbox.
          # Example:
          - rack_name: <i>rack.name

          # The 'sub' builtin is provided to transform the resulting value in the same way the python re.sub function does.
          # Example: In order to remove the CIDR notation of a subnet mask from an IP in netbox :
          - ip_without_cidr: <i>primary_ip.address | sub("/[0-9]+", "")
          # The 'default_key' builtin is provided to use a fallback key if the current value is None.
          - ansible_host: primary_ip.address | sub("/[0-9]+", "") | default_key(name)
          - ip_with_cidr: primary_ip.address
          - double: <b>rack_name | sub("-", "_")

          # The 'ALL' keyword as a value loads the entire dict returned by Netbox
          # example:
          # main: ALL
          #   If used this way, the 'main' key in the hostvars will contain all information for a host in Netbox

        # The 'group_by' field is an optional field. It expects a list and is used to configure the grouping feature.
        # The expected values are keys or compositions of keys appended to each others with dots and possibly filtered (see the README).
        # This allows the user to use keys in nested dicts which values must be used for groups creation. The values must be single value, not lists or dicts.
        # The keys must be present in Netbox objects.
        group_by:
          - device_role.name
          - <b>double
          # The tags keyword is special as it will create a group by tag and place an host in each of its corresponding groups.
          - tags

      # racks:
      #   host_vars:
      #     id: id
      # filters:
      #  role_id: 3

