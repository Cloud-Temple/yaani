data_sources: # --------------------------------------------------------
#This section is used to declare data sources.
# It must contain at least one data source

  # This source points to a Netbox API
  SrcA:
    type: netbox_api
    args:
      url: ...
      token: ...

  # This source points to a YAML or JSON flat file
  SrcB:
    type: file
    args:
      content_type: yaml | json
      path: ...

  # This source points to a script providing YAML or JSON data
  SrcC:
    type: script
    args:
      content_type: yaml | json
      path: ...


data_sets: # --------------------------------------------------------
  # This section is used to create data sets.

  # Extract a data set from a source - example : Netbox
  - name: Set1
    from: source
    args:
      name: SrcA  # The name of the targetted data source
      app: dcim   # The django app in netbox
      type: devices  # The type of elements to fetch
      filters:
        - tenant: tenant-1  # Filters on the request

  # Extract a data set from a source - example : File source
  - name: Set2
    from: source
    args:
      name: SrcB  # The targetted data source
      filter: .[]  # Where to get the desired data in set the data source - JQ filter

  # Extract a data set from another data set
  - name: Set3
    from: filtering
    args:
      name: Set1
      filter: '...'  # JQ filter

  # Merge two sets together
  - name: Set4
    from: merge
    args:
      keys:
        keya: Set1  # Explicit tie break in case of conflict
        keyb: Set2  # Explicit tie break in case of conflict
      sets:  # May have more that two element - two is the minimum
        - name: Set1  # Set to merge
          pivot: .id  # JQ filter - pivot value used for the join
        - name: Set2  # Set to merge
          pivot: .id  # JQ filter - pivot value used for the join

  # Decorate a set with other sets
  - name: Set5
    from: decoration
    args:
      main:
        name: Set4  # Main set name
        pivot: .id  # JQ filter - pivot value used for the join
      decorators:  # May have more that one element - one is the minimum
        - name: Set2  # Set to use as decorator
          pivot: .id  # JQ filter - pivot value used for the join
          anchor: anchor  # Key name where to attach data on the main set elements
        # - name: SetX  # Set to use as decorator
        #   pivot: .id  # JQ filter - pivot value used for the join
        #   anchor: anchor  # Key name where to attach data on the main set elements

render: # --------------------------------------------------------
  # This section is used to load vars and to render elements as an ansible inventory.
  elements:  # At least one set must be rendered
    - name: final_devices
      args:
        pre_condition: .tenant != null
        index:
          value: .name
        host_vars:
          loopback_v4: '.primary_ip4.address | split("/") | {address: .[0], netmask: .[1]}'
          name: .name
          tenant: .tenant.name
          interfaces: '[ .interfaces[] | {name: .name, ip: [.ip[].address | split("/") | {address: .[0], netmask: .[1]}]} ]'
        post_condition: .tenant != null
        group_prefix: ""

  # Option key
  group_vars:  # Load a data set as group vars of the specified ansible group
    - group: <ansible group Z>
      set: SetY

  # Option key
  group_hierarchy:  # Define group inheritance - leave the leaves blank
    grp1:
      grp2:
        grp4:
        grp5:
      grp3:

transform:
  # Optional section used to call custom python code to be applied on the inventory before dumping.
  - module: module/path
    func: function1

